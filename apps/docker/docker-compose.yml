# Command to run: docker compose -p golearnix up -d
# Command to stop and delete all: docker compose -p golearnix down --volumes

services:

  ##############################################################################
  #################### INFRAESTRUCTURA DE AUTENTICACIÓN ########################
  ##############################################################################
  auth-db:
    image: postgres:17.4
    container_name: auth-psql-db
    environment:
      POSTGRES_USER: golearnix
      POSTGRES_PASSWORD: golearnix
      POSTGRES_DB: auth-db
      TZ: Europe/Madrid
    ports:
      - "5432:5432"
    volumes:
      - auth-psql-db-data:/var/lib/postgresql/data
      - ./resources/databases/auth-db/1-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro
      - ./resources/databases/auth-db/2-data.sql:/docker-entrypoint-initdb.d/2-data.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U golearnix -d auth-db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - local

  rabbit:
    image: rabbitmq:3-management
    container_name: rabbit
    hostname: rabbit
    environment:
      RABBITMQ_DEFAULT_USER: golearnix
      RABBITMQ_DEFAULT_PASS: golearnix
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - local
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ##############################################################################
  #################### INFRAESTRUCTURA DE GESTIÓN DE CURSOS ####################
  ##############################################################################

  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.9.3
    ports:
      - "2181:2181"
    volumes:
      - ./resources/zookeeper/jaas.conf:/opt/bitnami/zookeeper/conf/jaas.conf:ro
      - ./resources/zookeeper/zoo.cfg:/opt/bitnami/zookeeper/conf/zoo.cfg:ro
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_SERVER_USERS=golearnix
      - ZOO_SERVER_PASSWORDS=golearnix
      - ZOO_CLIENT_USER=golearnix
      - ZOO_CLIENT_PASSWORD=golearnix
      - JVMFLAGS=-Djava.security.auth.login.config=/opt/bitnami/zookeeper/conf/jaas.conf
    healthcheck:
      test: ["CMD", "sh", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - local

  kafka:
    container_name: kafka
    image: bitnami/kafka:3.6.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/bitnami/kafka
      - ./resources/kafka/kafka_jaas.conf:/opt/bitnami/kafka/config/kafka_jaas.conf:ro
    environment:
      - KAFKA_OPTS=-Djava.security.auth.login.config=/opt/bitnami/kafka/conf/kafka_jaas.conf
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=SASL_PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=SASL_PLAINTEXT://localhost:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=SASL_PLAINTEXT
      - KAFKA_CFG_SASL_ENABLED_MECHANISMS=PLAIN
      - KAFKA_CFG_SASL_MECHANISM_INTER_BROKER_PROTOCOL=PLAIN
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: >
        kcat -b localhost:9092
            -X security.protocol=SASL_PLAINTEXT
            -X sasl.mechanisms=PLAIN
            -X sasl.username=golearnix
            -X sasl.password=golearnix
            -L >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - local

  course-psql-db:
    image: postgres:17.4
    container_name: course-psql-db
    environment:
      POSTGRES_USER: golearnix
      POSTGRES_PASSWORD: golearnix
      POSTGRES_DB: course-psql-db
      TZ: Europe/Madrid
    ports:
      - "5433:5432"
    volumes:
      - course-psql-db-data:/var/lib/postgresql/data
      - ./resources/databases/course-psql-db/pg_hba.conf:/docker-entrypoint-initdb.d/pg_hba.conf:ro
      - ./resources/databases/course-psql-db/1-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro
      - ./resources/databases/course-psql-db/2-data.sql:/docker-entrypoint-initdb.d/2-data.sql:ro
    command: [ "postgres", "-c", "wal_level=logical", "-c", "max_wal_senders=1", "-c", "max_replication_slots=1" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U golearnix -d course-psql-db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - local

  debezium:
    container_name: debezium
    image: quay.io/debezium/connect:2.3.0.Final
    depends_on:
      - kafka
      - course-psql-db
    ports:
      - "8083:8083"
    volumes:
      - ./resources/debezium/debezium_jaas.conf:/kafka/config/kafka_jaas.conf:ro
      - debezium-data:/kafka/connect
    environment:
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my-connect-configs
      - OFFSET_STORAGE_TOPIC=my-connect-offsets
      - BOOTSTRAP_SERVERS=kafka:9092
      - CONNECT_SECURITY_PROTOCOL=SASL_PLAINTEXT
      - CONNECT_SASL_MECHANISM=PLAIN
      - KAFKA_OPTS=-Djava.security.auth.login.config=/kafka/config/kafka_jaas.conf
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:8083/connectors || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - local

  redis:
    image: redis:8.0-rc1-alpine
    container_name: course-redis-db
    environment:
      TZ: Europe/Madrid
    command: [ "sh", "-c", "redis-server --aclfile /etc/redis/acl.conf --save 60 1 --loglevel warning --dir /data" ]
    ports:
      - "6379:6379"
    volumes:
      - course-redis-db-data:/data
      - ./resources/databases/course-redis-db/acl/acl.conf:/etc/redis/acl.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "-u", "redis://golearnix:golearnix@localhost:6379", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - local

#  redis-init:
#    image: redis:8.0-rc1-alpine
#    container_name: course-redis-init
#    depends_on:
#      redis:
#        condition: service_healthy
#    volumes:
#      - ./databases/course-redis-db/create-redis-database.sh:/scripts/create-redis-database.sh:ro
#    entrypoint: ["sh", "/scripts/create-redis-database.sh"]
#    networks:
#      - local

################################################################################
####################### VOLÚMENES Y REDES ######################################
################################################################################

networks:
  local:
    external: true
    name: golearnix-network

volumes:
  course-redis-db-data:
  course-psql-db-data:
  auth-psql-db-data:
  zookeeper-data:
  rabbitmq-data:
  debezium-data:
  kafka-data:


